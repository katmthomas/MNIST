# Loading Packages
import numpy as np
import tensorflow as tf
from tensorflow import keras

# Loading dataset
fashion_mnist = keras.datasets.fashion_mnist
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

# Data preperation
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
train_images = train_images / 255.0
test_images = test_images / 255.0

# Building Initial Model
model1 = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])
model1.summary()
model1.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(),
              metrics=['accuracy'])
#Training and evaluating the model
model1.fit(train_images, train_labels, epochs=10)
# epoch 10 output: l loss: 0.2370 - accuracy: 0.9113
test_loss, test_acc = model1.evaluate(test_images, test_labels)

print(f'\nTest accuracy: {test_acc:.4}')
# loss: 0.3254 - accuracy: 0.8849

#Predictions on first 15 images of the dataset
predictions = model1.predict(test_images)
range(0,14)
for i in range(0,14):
    print(predictions[i])
predictions[0:14]

#Increasing epochs for improved performance 
model1.fit(train_images, train_labels, epochs=10)
# epoch 20 loss: 0.1793 - accuracy: 0.9322
test_loss, test_acc = model1.evaluate(test_images, test_labels)

print(f'\nTest accuracy: {test_acc:.4}')
# test accuracy loss: 0.3546 - accuracy: 0.8885

#Final model with dropout layer
model2 = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(256, activation='relu'),
     keras.layers.Dropout(.25),
    keras.layers.Dense(256, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])
model2.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(),
              metrics=['accuracy'])
 model2.fit(train_images, train_labels, epochs=20)
 #epoch 20 loss: 0.2397 - accuracy: 0.9089
 test_loss, test_acc = model4.evaluate(test_images, test_labels)

print(f'\nTest accuracy: {test_acc:.4}')
# test accuracy loss: 0.3352 - accuracy: 0.8846
